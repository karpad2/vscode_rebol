{
	"name": "Rebol",
	"scopeName": "source.sc",
	"fileTypes": [
		"sc"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#type-literal"
		},
		{
			"include": "#logic"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#values"
		},
		{
			"include": "#words"
		},
		{
			"include": "#errors"
		}
	],
	"repository": {
		"binary-base-sixteen": {
			"begin": "(16)?#\\{",
			"end": "\\}",
			"name": "string.other.base16.rebol",
			"patterns": [
				{
					"match": "[0-9a-fA-F]*",
					"name": "constant.character.binary.rebol"
				}
			]
		},
		"binary-base-sixtyfour": {
			"begin": "64#\\{",
			"end": "\\}",
			"name": "string.other.base64.rebol"
		},
		"binary-base-two": {
			"begin": "2#\\{",
			"end": "\\}",
			"name": "string.other.base2.rebol",
			"patterns": [
				{
					"match": "[01]*",
					"name": "constant.character.binary.rebol"
				}
			]
		},
		"source-sql":{
			"contentName": "source.sql",
			"begin": "\"",
			"beginCaptures": {
			  "1": {
				"name": "punctuation.definition.tag.end.html"
			  }
			},
			"end": "\"",
			"patterns": [
			  {
				"include": "source.sql"
			  }
			]
		  },
		"block-blocks": {
			"begin": "(\\[)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.embedded.begin.rebol"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.embedded.end.rebol"
				}
			},
			"name": "meta.group.block.rebol",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"block-parens": {
			"begin": "\\(",
			"end": "\\)",
			"name": "meta.group.paren.rebol",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"blocks": {
			"patterns": [
				{
					"include": "#block-blocks"
				},
				{
					"include": "#block-parens"
				}
			]
		},
		"character": {
			"match": "#\"(\\^(\\(([0-9a-fA-F]{2,4}|[a-zA-Z]{3,6})\\)|.)|[^\\^\\\"])\"",
			"name": "constant.other.character.rebol"
		},
		"character-html": {
			"captures": {
				"1": {
					"name": "punctuation.definition.entity.html"
				},
				"3": {
					"name": "punctuation.definition.entity.html"
				}
			},
			"match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
			"name": "constant.character.entity.html"
		},
		"character-inline": {
			"match": "\\^(\\([0-9a-fA-F]{2,4}\\)|.)",
			"name": "constant.character.rebol"
		},
		"comment-line": {
			"match": ";([^%\\n]|%(?!>))*",
			"name": "comment.line.semicolon.rebol"
		},
		"comment-multiline-block": {
			"begin": "comment\\s*\\[",
			"end": "\\]",
			"name": "comment.block.rebol",
			"patterns": [
				{
					"include": "#comment-multiline-block-nested"
				}
			]
		},
		"comment-multiline-block-nested": {
			"begin": "\\[",
			"end": "\\]",
			"name": "comment.block.rebol",
			"patterns": [
				{
					"include": "#comment-multiline-block-nested"
				}
			]
		},
		"comment-multiline-string": {
			"begin": "comment\\s*\\{",
			"end": "\\}",
			"name": "comment.block.rebol",
			"patterns": [
				{
					"include": "#comment-multiline-string-nested"
				}
			]
		},
		"comment-multiline-string-nested": {
			"begin": "\\{",
			"end": "\\}",
			"name": "comment.block.rebol",
			"patterns": [
				{
					"include": "#comment-multiline-string-nested"
				}
			]
		},
		"comment-tag": {
			"begin": "(?<=^|[\\s\\[\\]()}\"])<!--",
			"end": "-->",
			"name": "comment.block.tag.rebol"
		},
		"comments": {
			"patterns": [
				{
					"include": "#comment-shebang"
				},
				{
					"include": "#comment-line"
				},
				{
					"include": "#comment-multiline-string"
				},
				{
					"include": "#comment-multiline-block"
				},
				{
					"include": "#comment-tag"
				}
			]
		},
		"comments-shebang": {
			"match": "^#!/.*rebol.*",
			"name": "comment.line.shebang.rebol"
		},
		"error-commas": {
			"match": ",",
			"name": "invalid.illegal.comma.rebol"
		},
		"errors": {
			"patterns": [
				{
					"include": "#error-commas"
				}
			]
		},
		"logic": {
			"match": "#\\[(true|false|none)]",
			"name": "constant.language.logic.rebol"
		},
		"string-email": {
			"match": "[^\\s\\n:/\\[\\]\\(\\)]+@[^\\s\\n:/\\[\\]\\(\\)]+",
			"name": "string.email.rebol"
		},
		"string-rawstring": {
			"begin": "(%+){",
			"end": "}(%+)",
			"name": "string.other.rebol"
		},
		"string-file": {
			"match": "%[^\\s\\n\\[\\]\\(\\)\\{\\}]*",
			"name": "string.other.file.rebol"
		},
		"string-file-quoted": {
			"begin": "%\"",
			"end": "\"",
			"name": "string.other.file.rebol",
			"patterns": [
				{
					"match": "%[A-Fa-f0-9]{2}",
					"name": "constant.character.hex.rebol"
				}
			]
		},
		"string-issue": {
			"match": "#[^\\s\\n\\[\\]\\(\\)]*",
			"name": "string.other.issue.rebol"
		},
		"string-multiline": {
			"begin": "\\{",
			"end": "\\}",
			"name": "string.other.rebol",
			"patterns": [
				{
					"include": "#string-rsp-tag"
				},
				{
					"include": "#character-inline"
				},
				{
					"include": "#character-html"
				},
				{
					"include": "#string-nested-multiline"
				}				
			]
		},
		"string-nested-multiline": {
			"begin": "\\{",
			"end": "\\}",
			"name": "string.other.rebol",
			"patterns": [
				{
					"include": "#string-nested-multiline"
				}
			]
		},
		"string-quoted": {
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.rebol",
			"patterns": [
				{
					"include": "#string-rsp-tag"
				},
				{
					"include": "#character-inline"
				},
				{
					"include": "#character-html"
				}
			]
		},
		"string-rsp-tag": {
			"begin": "<%(==?|:|!)? ",
			"end": " %>",
			"name": "source.rebol.embedded.block.html",
			"patterns": [
				{
					"include": "source.rebol"
				}
			]
		},
		"string-tag": {
			"begin": "<(?:\\/|%={0,2}\\ |\\!)?(?:([-_a-zA-Z0-9]+):)?([-_a-zA-Z0-9:]+)",
			"captures": {
				"1": {
					"name": "entity.other.namespace.xml"
				},
				"2": {
					"name": "entity.name.tag.xml"
				}
			},
			"end": "(?:\\s/|\\ %)?>",
			"name": "meta.tag.rebol",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "entity.other.namespace.xml"
						},
						"2": {
							"name": "entity.other.attribute-name.xml"
						}
					},
					"match": " (?:([-_a-zA-Z0-9]+):)?([_a-zA-Z-]+)"
				},
				{
					"include": "#string-tag-double-quoted"
				},
				{
					"include": "#string-tag-single-quoted"
				}
			]
		},
		"string-tag-double-quoted": {
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double.xml"
		},
		"string-tag-single-quoted": {
			"begin": "'",
			"end": "'",
			"name": "string.quoted.single.xml"
		},
		"string-url": {
			"match": "[A-Za-z][\\w-]{1,15}:(/{0,3}[^\\s\\n\\[\\]\\(\\)]+|//)",
			"name": "string.other.url.rebol"
		},
		"string-sql": {
			"begin": "\"",
			"end": "\"",
			"name": "source.rebol.embedded.block.sql"
		},
		"sql-string-double-quoted": {
			"begin": "\"\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|WITH)\\b)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.rebol"
				}
			},
			"contentName": "source.sql.embedded.rebol",
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.rebol"
				}
			},
			"name": "string.quoted.double.sql.rebol",
			"patterns": [
				{
					"match": "(#)(\\\\\"|[^\"])*(?=\"|$)",
					"name": "comment.line.number-sign.sql",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.sql"
						}
					}
				},
				{
					"match": "(--)(\\\\\"|[^\"])*(?=\"|$)",
					"name": "comment.line.double-dash.sql",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.sql"
						}
					}
				},
				{
					"match": "\\\\[\\\\\"`']",
					"name": "constant.character.escape.rebol"
				},
				{
					"match": "'(?=((\\\\')|[^'\"])*(\"|$))",
					"name": "string.quoted.single.unclosed.sql"
				},
				{
					"match": "`(?=((\\\\`)|[^`\"])*(\"|$))",
					"name": "string.quoted.other.backtick.unclosed.sql"
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.sql",
					"patterns": [
						{
							"include": "#interpolation_double_quoted"
						}
					]
				},
				{
					"begin": "`",
					"end": "`",
					"name": "string.quoted.other.backtick.sql",
					"patterns": [
						{
							"include": "#interpolation_double_quoted"
						}
					]
				},
				{
					"include": "#interpolation_double_quoted"
				},
				{
					"include": "source.sql"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#character"
				},
				{
					"include": "#string-quoted"
				},
				{
					"include": "#string-rawstring"
				},
				{
					"include": "#string-multiline"
				},
				{
					"include": "#string-tag"
				},
				{
					"include": "#string-file-quoted"
				},
				{
					"include": "#string-file"
				},
				{
					"include": "#string-url"
				},
				{
					"include": "#string-sql"
				},
				{
					"include": "#string-email"
				},
				{
					"include": "#binary-base-two"
				},
				{
					"include": "#binary-base-sixty-four"
				},
				{
					"include": "#binary-base-sixteen"
				},
				{
					"include": "#string-issue"
				},
				{
					"include": "#sql-string-double-quoted"
				}

				

				
			]
		},
		"type-literal": {
			"begin": "#\\[(?:(\\w+!))",
			"captures": {
				"1": {
					"name": "keyword.control.datatype.rebol"
				}
			},
			"end": "]",
			"name": "meta.literal.rebol",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"value-date": {
			"match": "\\d{1,4}\\-(Jan(u(a(ry?)?)?)?|Feb(r(u(a(ry?)?)?)?)?|Mar(ch?)?|Apr(il?)?|May|June?|July?|Aug(u(st?)?)?|Sep(t(e(m(b(er?)?)?)?)?)?|Oct(o(b(er?)?)?)?|Nov(e(m(b(er?)?)?)?)?|Dec(e(m(b(er?)?)?)?)?|[1-9]|1[012])\\-\\d{1,4}(/\\d{1,2}[:]\\d{1,2}([:]\\d{1,2}(\\.\\d{1,5})?)?([+-]\\d{1,2}[:]\\d{1,2})?)?",
			"name": "constant.other.date.rebol"
		},
		"value-money": {
			"match": "(?<!\\w)-?[a-zA-Z]*\\$[0-9]+(\\.[0-9]{2})?",
			"name": "constant.numeric.money.rebol"
		},
		"value-number": {
			"match": "(?<![\\w.,])([-+]?((\\d+[\\d']*[.,]?[\\d']*)|([.,]\\d+[\\d']*))((e|E)(\\+|-)?\\d+)?)(?=\\W)",
			"name": "constant.numeric.rebol"
		},
		"value-hex": {
			"match": "(?<!\\w)[0-9A-F]+[0-9A-F]*h(?=[\\s\\[\\](){\"]|$)",
			"name": "constant.numeric.hex.rebol"
		},
		"value-pair": {
			"match": "(?<!\\w)[-+]?[[:digit:]]+[x][-+]?[[:digit:]]+",
			"name": "constant.numeric.pair.rebol"
		},
		"value-time": {
			"match": "([-+]?[:]\\d{1,2}([aApP][mM])?)|([-+]?[:]\\d{1,2}[.]\\d{0,9})|([-+]?\\d{1,2}[:]\\d{1,2}([aApP][mM])?)|([-+]?\\d{1,2}[:]\\d{1,2}[.]\\d{0,9})|([-+]?\\d{1,2}[:]\\d{1,2}[:]\\d{1,2}([.]\\d{0,9})?([aApP][mM])?)(?!\\w)",
			"name": "constant.numeric.time.rebol"
		},
		"value-tuple": {
			"match": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){2,9}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.?",
			"name": "constant.rgb-value.rebol"
		},
		"values": {
			"patterns": [
				{
					"include": "#value-date"
				},
				{
					"include": "#value-time"
				},
				{
					"include": "#value-tuple"
				},
				{
					"include": "#value-number"
				},
				{
					"include": "#value-hex"
				},
				{
					"include": "#value-pair"
				},
				{
					"include": "#value-money"
				}
			]
		},
		"word-datatype": {
			"match": "(?<=^|[\\s\\[\\]()}\"/])[A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~\\&]*(/([A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~]*|\\d+))*\\!",
			"name": "storage.type.cs.rebol"
		},
		"word-set": {
			"match": "[A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~&]*(/([A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~&]*|\\d+))*:",
			"name": "variable.name.rebol"
		},
		"word-get": {
			"match": ":[A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~&]*(/([A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~&]*|\\d+)*)*",
			"name": "variable.other.getword.rebol"
		},
		"word-header": {
			"match": "(?<=^\\[|^)(rebol|rebol(/System)?)(?=\\s*\\[)",
			"name": "keyword.control.header.rebol"
		},
		"word-lit": {
			"match": "(?<=^|[\\s\\[\\]()}\"/])'[A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~\\&]*(/([A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~][A-Za-z0-9=\\-\\!\\?\\_\\*\\+\\.`~]*|\\d+))*",
			"name": "constant.other.litword.rebol"
		},
		"word-native": {
			"match": "(?<=^|[\\s\\[\\]()}\"])(datatype!|format|merge|cell|align|unset!|none!|logic!|block!|paren!|string!|file!|url!|char!|integer!|float!|word!|set-word!|lit-word!|get-word!|refinement!|issue!|hide-popup||native!|action!|op!|funct1on!|path!|lit-path!|set-path!|get-path!|routine!|bitset!|point!|object!|typeset!|error!|vector!|hash!|pair!|percent!|tuple!|map!|binary!|series!|time!|tag!|email!|handle!|date!|image!|to|not|remove|while|collect|any|copy|insert|if|quote|set|case|change|clear|move|poke|put|random|reverse|sort|swap|take|trim|uppercase|lowercase|checksum|add|subtract|divide|on-parse-event|try|catch|multiply|browse|throw|math|event!|make|any-type!|return|reflect|form|mold|all|modify|absolute|number!|negate|power|remainder|round|even\\?|odd\\?|and~|complement|or~|xor~|append|at|back|any-object!|find|skip|last|tail|head|head\\?|index\\?|any-word!|length\\?|next|pick|scalar!|any-string!|select|any-function!|tail\\?|delete|query|read|source|as|write|unless|either|until|loop|repeat|forever|foreach|forall|remove-each|func1|funct1on|does|has|switch|do|expand|reboluce|any-block!|compose|get|print|prin|equal\\?|not-equal\\?|strict-equal\\?|lesser\\?|greater\\?|lesser-or-equal\\?|greater-or-equal\\?|same\\?|type\\?|stats|show|bind|context|in|object|parse|input|union|unique|intersect|difference|exclude|complement\\?|dehex|negative\\?|positive\\?|max|min|shift|to-hex|sine|cosine|tangent|arcsine|arccosine|arctangent|arctangent2|NaN\\?|zero\\?|log-2|log-10|log-e|exp|square-root|construct|value\\?|as-pair|break|continue|exit|extend|debase|enbase|to-local-file|wait|unset|new-line|any-list!|new-line\\?|context\\?|set-env|get-env|list-env|now|sign\\?|any-path!|call|size\\?|decompress|recycle|on|off|quit|\\+|no|last-lf\\?|get-current-dir|dir|set-current-dir|make-dir|<|true|<>|%|<<|or|null|cause-error|view|unview|error\\?|quit-return|=|none|immediate!|all-word!|none\\?|any-block\\?|system|any-list\\?|word\\?|char\\?|tag\\?|any-string\\?|block\\?|series\\?|binary\\?|\\*|/|attempt|p-indent|newline|url\\?|string\\?|suffix\\?|file\\?|object\\?|body-of|yes|first|second|third|-|>|mod|<=|slash|clean-path|dir\\?|exists\\?|normalize-dir|empty\\?|dirize|create-dir|dbl-quote|to-rebol-file|space|offset\\?|what-dir|expand-directives|load|rebol|split-path|change-dir|path-thru|save|load-thru|sum|to-local-date|false|float\\?|>=|charset|\\?|lf|tab|set-quiet|repend|set-word\\?|q|stop-reactor|words-of|replace|react|function\\?|spec-of|unset\\?|rebol|halt|op\\?|any-function\\?|to-paren|routine|as-color|as-rgba|\\*\\*|class-of|face!|rich-text|size-text|hex-to-rgb|tuple\\?|make-face|gui-console-ctx|debug-info\\?|find-flag\\?|draw|handle\\?|link-tabs-to-parent|link-sub-to-parent|on-face-deep-change\\*|update-font-faces|do-actor|do-safe|event\\?|do-events|white|font-fixed|font-sans-serif|font-serif|transparent|pair\\?|font!|foreach-face|cancel-captions|CR|pad|issue\\?|para!|alter|path\\?|typeset\\?|datatype\\?|set-flag|layout|extract|image\\?|rtd-layout|get-word\\?|to-logic|to-set-word|//|to-block|center-face|dump-face|scroller!|request-font|request-file|request-dir|rejoin|dot|ellipsize-at|any-object\\?|map\\?|keys-of|a-an|also|help-string|what|routine\\?|os-info|to-UTC-date|escape|ask|list-dir|probe|action\\?|native\\?|refinement\\?|to-word|comma|get-scroller|caret-to-offset|offset-to-caret|write-clipboard|read-clipboard|integer\\?|rebol-complete-ctx|highlight|to-string|fstk-logo|gray|shift-right|shift-left|shift-logical|as-ipv4|write-stdout|sp|crlf|pi|internal!|external!|default!|aqua|beige|black|blue|brick|brown|coal|coffee|crimson|cyan|forest|gold|green|ivory|khaki|leaf|linen|magenta|maroon|mint|navy|oldrab|olive|orange|papaya|pewter|pink|purple|reblue|rebolor|sienna|silver|sky|snow|tanned|teal|violet|water|wheat|yello|yellow|glass|alert|comment|\\?\\?|fourth|fifth|values-of|bitset\\?|email\\?|get-path\\?|hash\\?|lit-path\\?|lit-word\\?|logic\\?|paren\\?|percent\\?|set-path\\?|time\\?|date\\?|vector\\?|any-path\\?|any-word\\?|number\\?|immediate\\?|scalar\\?|all-word\\?|to-bitset|to-binary|to-char|to-email|to-file|to-float|to-get-path|to-get-word|to-hash|to-integer|to-issue|to-lit-path|to-lit-word|to-map|to-none|to-pair|to-path|to-percent|to-refinement|to-set-path|to-tag|to-time|to-typeset|to-tuple|to-unset|to-url|to-image|to-date|parse-trace|modulo|eval-set-path|extract-boot-args|flip-exe-flag|split|do-file|exists-thru\\?|read-thru|do-thru|cos|sin|tan|acos|asin|atan|atan2|sqrt|average|==|=\\?|>>|>>>|and|xor|reactor!|deep-reactor!|clear-reactions|dump-reactions|is|react\\?|preprocessor|within\\?|overlap\\?|distance\\?|face\\?|offset-to-char|metrics\\?|insert-event-func|remove-event-func|set-focus|help-ctx|help|fetch-help|about|ls|ll|pwd|cd|rebol-complete-input|tips!)(/(?=[A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&])|(?=[\\s\\[\\](){\"]|$))",
			"name": "storage.type.function.rebol"
		},
		"word-native-fun": {
			"match": "(?<=^|[\\s\\[\\]()}\"])(function|func|sistime)(/(?=[A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&])|(?=[\\s\\[\\](){\"]|$))",
			"name": "storage.type.fun.rebol"
		},
		"word-parse": {
			"match": "(?<=^|[\\s\\[\\]()}\"])(thru|some|opt|end)(?=[\\s\\[\\](){\"]|$)",
			"name": "keyword.control.parse.rebol"
		},
		"word-qm": {
			"match": "(?<=^|[\\s\\[\\]()}\"])(qm|route|render|rebolirect-to|publish|response|validate|verify|get-param|get-cookie|set-cookie|require)(/(?=[A-Za-z=\\-\\?\\!\\_\\*\\+\\.`~\\&])|(?=[\\s\\[\\](){\"]))",
			"name": "keyword.control.qm.rebol"
		},
		"word-refine": {
			"match": "/[A-Za-z=`~][A-Za-z0-9=\\-\\!\\?\\_\\*\\.`~]*",
			"name": "constant.other.word.refinement.rebol"
		},
		
		"words": {
			"name": "meta.word.rebol",
			"patterns": [
				{
					"include": "#word-datatype"
				},
				{
					"include": "#word-set"
				},
				{
					"include": "#word-get"
				},
				{
					"include": "#word-lit"
				},
				{
					"include": "#word-header"
				},
				{
					"include": "#word-native"
				},
				{
					"include": "#word-native-fun"
				},
				{
					"include": "#word-refine"
				},
				{
					"include": "#word-qm"
				},
				{
					"include": "#word"
				}

				
			]
		}
	},
	"version": ""
}
